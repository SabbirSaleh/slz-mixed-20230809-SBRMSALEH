---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: compliance-scan-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
      default: "false"
    - name: pattern
      description: Infrastructure pattern to provision
      default: ""
    - name: cra-skip-failure
      description: (optional) flag to skip cra failure
      default: "false"
  results:
    - name: apply-output
      description: output of "code risk analyzer"
    - name: status
      description: success or failure status of "code risk analyzer"
  stepTemplate:
    envFrom:
      - configMapRef:
          name: environment-properties
      - secretRef:
          name: secure-properties
    env:
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: PATTERN
        value: $(params.pattern)
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: REPOSITORY
        value: $(params.repository)
      - name: TF_VAR_ibmcloud_api_key
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: IBMCLOUD_API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
      - name: CRA_SKIP_FAILURE
        value: $(params.cra-skip-failure)
  steps:
    - name: code-scan
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.3
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash -e
          if [[ "${PIPELINE_DEBUG}" == "true" ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /config/toolchain.json)
          echo "TOOLCHAIN ID => ${TOOLCHAIN_ID}"
          REGION_ID=$(jq -r '.region_id' /config/toolchain.json)
          REGION=$(echo "${REGION_ID}" | grep -oP '.+:.+:\K[\w-]+')

          TF_DIR="/tmp"
          TF_CMD="${TF_DIR}/terraform"
          wget -q https://releases.hashicorp.com/terraform/1.3.7/terraform_1.3.7_linux_amd64.zip -O "${TF_CMD}.zip"
          unzip -d "${TF_DIR}" -u "${TF_CMD}.zip"
          ibmcloud plugin install cra -f; 
          ibmcloud login --apikey ${IBMCLOUD_API_KEY} -r "${REGION}";  
          cd /artifacts/patterns/"${PATTERN}"
          echo "Issuing terraform init";
          "${TF_CMD}" init;

          echo "Issuing terraform plan";
          "${TF_CMD}" plan -lock=false -out=./tfplan > tfout.txt 2>&1;
          rc=$?
          if [[ $rc -ne 0 || "${PIPELINE_DEBUG}" == "true" ]]; then
             echo "Generated Terraform plan:"
             cat tfout.txt

             if [[ $rc -ne 0 ]]; then 
                exit 1
             fi  
          fi
          echo "Successfully generated terraform plan"

          echo "Issuing terraform show";
          "${TF_CMD}" show -json ./tfplan > ./tfplan.json;
          rc=$?
          if [[ $rc -ne 0 || "${PIPELINE_DEBUG}" == "true"  ]]; then
             echo "Generated Terraform plan:"
             cat tfout.txt

             echo "Generated plan in JSON format"
             cat tfplan.json

             if [[ $rc -ne 0 ]]; then 
                exit 1
             fi 
          fi
          echo "Successfully saved plan in JSON format"

          echo "Issuing cra scan";
          export TOOLCHAIN_ID="${TOOLCHAIN_ID}"; 
          ibmcloud cra terraform-validate --tf-plan ./tfplan.json --policy-file /artifacts/code_risk_analyzer/goals.json --report ./report --verbose --strict
          rc=$?

          echo "flag set to ${CRA_SKIP_FAILURE}"
          if [[ $rc -ne 0 ]]; then
            if [[ "${CRA_SKIP_FAILURE}" == "true" ]]; then
               echo "Skipping cra scan failure of return code ${rc}"
               exit 0;
            fi
            exit $rc
          fi
      volumeMounts:
        - mountPath: /config
          name: cd-config-volume

  workspaces:
    - name: artifacts
      mountPath: /artifacts
    - name: secrets
      mountPath: /secrets
  volumes:
    - name: secrets
      secret:
        secretName: $(params.continuous-delivery-context-secret)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
